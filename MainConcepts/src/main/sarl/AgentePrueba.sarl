/** 
 * 
 */
import io.sarl.api.core.AgentKilled
import io.sarl.api.core.AgentSpawned
import io.sarl.api.core.ContextJoined
import io.sarl.api.core.ContextLeft
import io.sarl.api.core.Destroy
import io.sarl.api.core.Initialize
import io.sarl.api.core.Logging
import io.sarl.api.core.MemberJoined
import io.sarl.api.core.MemberLeft
import io.sarl.api.core.ParticipantJoined
import io.sarl.api.core.ParticipantLeft
import io.sarl.api.core.SpaceCreated
import io.sarl.api.core.SpaceDestroyed
import io.sarl.api.core.Schedules
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Behaviors

//import java.util.function.Supplier
//import java.util.logging.Logger

/** 
 * 
 */
 
agent AgentePrueba {
	uses Logging
	uses Schedules
	uses Lifecycle
	uses Behaviors
	//uses Capacidades

	on Initialize {
		// Event trigger before the agent begins to live or to be used.
		// You should put all the initialization statements in this block of code.
		
		var Skill = new MiPropiaSkill
		setSkill(Skill, Capacidades)
		//setSkill(Capacidades, new MiPropiaSkill)
		info("Agente inicializado")

		// Create the instance of the behavior
		var myBehavior = new Comportamiento(this) // <- the parameter is the agent
		
		// Register the behavior for receiving the events.
		// This function is given by the Behaviors capacity
		registerBehavior(myBehavior)
		
		every(1000)[wake(new RecibeEvento("es un evento!!"))]
		
		in(5000)[
			unregisterBehavior(myBehavior)
			info("Me dejo de comportar mal!")
		]
		
		in(6.seconds)[wake(new RealizarSkill())]
		
		in(10000)[killMe]
		
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		
		
		info("The agent was stopped.")
	}
	
	on RealizarSkill {
		var s = getSkill(Capacidades)
		// Run the action of the skill
		s.informacion("Uso mi skill")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on SpaceCreated {
		// Event trigger when a space is created into one of the contexts where the agent is.
	}

	on SpaceDestroyed {
		// Event trigger when a space is destroyed from one of the contexts where the agent is.
	}

	on ParticipantJoined {
		// Event trigger when a participant has joined a space.
	}

	on ParticipantLeft {
		// Event trigger when a participant has left a space.
	}

	

}

event RecibeEvento {
	val value : String

	new (string : String) {
		value = string
	}
}

event RealizarSkill {

}

